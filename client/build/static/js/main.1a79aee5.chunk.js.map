{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Sucess.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","Object","objectSpread","products","toConsumableArray","categories","currentCategory","cartOpen","cart","concat","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","_ref","value","initialState","props","objectWithoutProperties","_useProductReducer","useReducer","_useProductReducer2","slicedToArray","dispatch","react_default","a","createElement","assign","useStoreContext","useContext","ProductItem","item","_useStoreContext","_useStoreContext2","image","name","price","quantity","className","react_router_dom","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","_templateObject","taggedTemplateLiteral","QUERY_CATEGORIES","_templateObject2","_templateObject3","QUERY_USER","_templateObject4","QUERY_CHECKOUT","_templateObject5","ProductList","_useQuery","useQuery","loading","data","useEffect","forEach","then","category","components_ProductItem","key","spinner","CategoryMenu","categoryData","id","currenCategory","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","auth","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","removeItem","stripePromise","loadStripe","Cart","_useLazyQuery","useLazyQuery","_useLazyQuery2","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","_getCart","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","stop","apply","arguments","getCart","components_CartItem","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","components_CategoryMenu","components_ProductList","components_Cart","Detail","useParams","_useState","useState","_useState2","currentProduct","setCurrentProduct","indexedProducts","Fragment","description","disabled","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","components_Jumbotron","LOGIN","mutations_templateObject","ADD_ORDER","mutations_templateObject2","ADD_USER","mutations_templateObject3","Login","email","password","formState","setFormState","_useMutation","useMutation","_useMutation2","login","error","handleFormSubmit","Login_regeneratorRuntime","event","mutationResponse","preventDefault","t0","_x","handleChange","_event$target","defineProperty","onSubmit","htmlFor","Signup","addUser","Signup_regeneratorRuntime","firstName","lastName","Nav","href","logout","Success","addOrder","_saveOrder","Sucess_regeneratorRuntime","_yield$addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","GlobalState_StoreProvider","components_Nav","react_router","path","element","pages_Home","pages_Login","pages_Signup","pages_OrderHistory","pages_Detail","pages_NoMatch","Sucess","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a79aee5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\n\r\n// create indexedDB helper function\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the databse 'shop-shop' with the version of 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object sote\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore('products', { keyPath: '_id '});\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function (e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    // on database open success\r\n    request.onsuccess = function(e) {\r\n      // save a reference of the database to the 'db' variable\r\n      db = request.result;\r\n      // open a transaction do whatever we pass into 'storeName' (must match one of the object store names)\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName)\r\n\r\n      // if there's any errors, let us know\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n        }\r\n\r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    }\r\n  });\r\n}\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n","import { useReducer } from \"react\";\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n\r\n} from './actions';\r\n    \r\n// reducer function\r\nexport const reducer = ( state, action ) => {\r\n    switch(action.type) {\r\n    // if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n        return {\r\n            ...state,\r\n            products: [...action.products]\r\n        };\r\n    // if action type value is the value of 'UPDATE_CATEGORIES', return a new state object with an updated categories array\r\n    case UPDATE_CATEGORIES:\r\n        return {\r\n            ...state,\r\n            categories: [...action.categories]\r\n        };\r\n    case UPDATE_CURRENT_CATEGORY:\r\n        return {\r\n            ...state,\r\n            currentCategory: action.currentCategory\r\n        };\r\n    case ADD_TO_CART:\r\n        return {\r\n            ...state,\r\n            // cart set to true so that users can immediately view the cart with a newly added item, if its not already open.\r\n            cartOpen: true,\r\n            cart: [...state.cart, action.product]\r\n        }\r\n    case ADD_MULTIPLE_TO_CART:\r\n        return {\r\n            ...state,\r\n            cart: [...state.cart, ...action.products],\r\n        };\r\n    case REMOVE_FROM_CART:\r\n        let newState = state.cart.filter(product => {\r\n            return product._id !== action._id;\r\n        });\r\n\r\n        return {\r\n            ...state,\r\n            cartOpen: newState.length > 0,\r\n            cart: newState\r\n        };\r\n    case UPDATE_CART_QUANTITY:\r\n        return {\r\n            ...state,\r\n            cartOpen: true,\r\n            cart: state.cart.map(product => {\r\n                if (action._id === product._id) {\r\n                    product.purchaseQuantity = action.purchaseQuantity;\r\n                }\r\n                return product;\r\n            })\r\n        }\r\n    case CLEAR_CART:\r\n        return {\r\n            ...state,\r\n            cartOpen: false,\r\n            cart: []\r\n        };\r\n    case TOGGLE_CART:\r\n        return {\r\n            ...state,\r\n            cartOpen: !state.cartOpen\r\n        }\r\n    // if it's none of these actions, do not update state at all and keep things the same!\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState)\r\n}\r\n","import React, { createContext, useContext } from 'react';\r\nimport { useProductReducer } from './reducers'\r\n\r\n// insatntaite the global state object.\r\nconst StoreContext = createContext();\r\n// every context object comes with tow compnents, a Provider and Consumer. Providers hold data and Consumers grab it.\r\nconst { Provider } = StoreContext;\r\n\r\n\r\n// store provider\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: '',\r\n    });\r\n    // use this to confirm it works!\r\n    console.log(state);\r\n    // dispatch bring the most updated state\r\n    return <Provider value={[state, dispatch]} {...props} />\r\n};\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\n\r\n\r\nfunction ProductItem(item) {\r\n  const [state, dispatch] = useStoreContext();\r\n  \r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  const { cart } = state;\r\n\r\n  const addToCart = () => {\r\n    // find the cart item with the matching id\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\r\n\r\n    // if there was a match, call UPDATE with a new purchase quantity\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        // partInt take a string and changes it into an integer\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', {...item, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\n\r\n// query products\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n// query all products\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// query categories\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\n// query a single user\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n// query checkout products\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport ProductItem from '../ProductItem';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport spinner from '../../assets/spinner.gif';\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    // if there's data to be stored\r\n    if (data) {\r\n      // let's store it in the global state object\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      // but let's also take each product and save it to the IndexedDB using the helper function\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product)\r\n      });\r\n      // add else if to check if 'loading` is undefined in 'useQuery()` Hook\r\n    } else if (!loading) {\r\n      //since we're offline, get all of the data from the 'products' store\r\n      idbPromise('products', 'get').then((products) => {\r\n        // use retrieved data to set global set for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    // if categoryData exists or has changed from the respone of useQuery, then run dispatch()\r\n    if (categoryData) {\r\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n        idbPromise('categories', 'get').then(categories => {\r\n          dispatch({\r\n            type: UPDATE_CATEGORIES,\r\n            categories: categories\r\n          });\r\n        });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currenCategory: id\r\n    });\r\n  };\r\n \r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n      \r\n      idbPromise('cart', 'put', {...item, purchaseQuantity: parseInt(value)})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport './style.css';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n\r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        productIds.push(item._id);\r\n      }\r\n    });\r\n\r\n    getCheckout({\r\n      variables: { products: productIds },\r\n    });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { idbPromise } from '../utils/helpers';\r\nimport { QUERY_PRODUCTS } from '../utils/queries';\r\nimport Cart from '../components/Cart';\r\nimport { useStoreContext } from '../utils/GlobalState';\r\nimport { \r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    ADD_TO_CART,\r\n    UPDATE_PRODUCTS, \r\n  } from '../utils/actions';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n\r\n    if(itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise('cart', 'put', {...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      id: currentProduct._id\r\n    });\r\n\r\n    // upon removal from cart, delete the item from IndexedDB using the 'currentProduct._id' to locate what to remove\r\n    idbPromise('cart', 'delete', {...currentProduct});\r\n  };\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find((product) => product._id === id));\r\n    }\r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts,\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  return (\r\n    <>\r\n      {currentProduct && cart ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Products</Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{' '}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button \r\n              disabled={!cart.find(p => p._id === currentProduct._id)} \r\n              onClick={removeFromCart}\r\n            >\r\n            Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\n\r\nfunction Success() {\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n  \r\n    useEffect(() => {\r\n      async function saveOrder() {\r\n        const cart = await idbPromise('cart', 'get');\r\n        const products = cart.map((item) => item._id);\r\n  \r\n        if (products.length) {\r\n          const { data } = await addOrder({ variables: { products } });\r\n          const productData = data.addOrder.products;\r\n  \r\n          productData.forEach((item) => {\r\n            idbPromise('cart', 'delete', item);\r\n          });\r\n        }\r\n  \r\n        setTimeout(() => {\r\n          window.location.assign('/');\r\n        }, 3000);\r\n      }\r\n  \r\n      saveOrder();\r\n    }, [addOrder]);\r\n  \r\n    return (\r\n      <div>\r\n        <Jumbotron>\r\n          <h1>Success!</h1>\r\n          <h2>Thank you for your purchase!</h2>\r\n          <h2>You will now be redirected to the home page</h2>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Success;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport Success from './pages/Sucess'\r\nimport { StoreProvider } from './utils/GlobalState';\r\nimport OrderHistory from './pages/OrderHistory';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n          <Nav />\r\n          <Routes>\r\n            <Route path=\"/\" element={<Home />}/>\r\n            <Route path=\"/login\" element={<Login />}/>\r\n            <Route path=\"/signup\" element={<Signup />}/>\r\n            <Route path=\"/orderHistory\" element={<OrderHistory />}/>\r\n            <Route path=\"/products/:id\" element={<Detail />} />\r\n            <Route path=\"*\" element={<NoMatch />}/>\r\n            <Route path=\"/success\" element={<Success />}/>\r\n          </Routes>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}